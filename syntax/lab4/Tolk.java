
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue May 13 21:41:20 CEST 2014
//----------------------------------------------------

import java.util.List;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue May 13 21:41:20 CEST 2014
  */
public class Tolk extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Tolk() {super();}

  /** Constructor which sets the default scanner. */
  public Tolk(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Tolk(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\004\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\004\000\002\005\004\000" +
    "\002\006\004\000\002\007\006\000\002\012\003\000\002" +
    "\012\003\000\002\010\004\000\002\010\004\000\002\010" +
    "\003\000\002\011\004\000\002\011\004\000\002\011\003" +
    "\000\002\013\003\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\042\000\014\004\016\005\005\006\006\007\012\023" +
    "\014\001\002\000\004\002\044\001\002\000\016\010\027" +
    "\011\026\012\031\013\033\014\032\015\036\001\002\000" +
    "\016\010\027\011\026\012\031\013\033\014\032\015\036" +
    "\001\002\000\004\021\ufffc\001\002\000\004\021\uffff\001" +
    "\002\000\004\021\ufffe\001\002\000\004\024\021\001\002" +
    "\000\004\021\ufffd\001\002\000\004\021\ufffb\001\002\000" +
    "\004\021\020\001\002\000\004\022\017\001\002\000\004" +
    "\021\ufff8\001\002\000\004\002\000\001\002\000\004\020" +
    "\022\001\002\000\006\016\023\017\024\001\002\000\004" +
    "\021\uffed\001\002\000\004\021\uffee\001\002\000\004\021" +
    "\ufff7\001\002\000\004\021\uffef\001\002\000\004\021\ufff2" +
    "\001\002\000\004\021\ufff6\001\002\000\004\010\042\001" +
    "\002\000\004\011\041\001\002\000\004\010\040\001\002" +
    "\000\004\021\ufff9\001\002\000\004\021\ufff5\001\002\000" +
    "\004\011\037\001\002\000\004\021\ufff0\001\002\000\004" +
    "\021\ufff3\001\002\000\004\021\ufff1\001\002\000\004\021" +
    "\ufff4\001\002\000\004\021\ufffa\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\042\000\016\002\003\003\014\004\007\005\010\006" +
    "\012\007\006\001\001\000\002\001\001\000\010\010\027" +
    "\011\034\012\042\001\001\000\010\010\027\011\034\012" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Tolk$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Tolk$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Tolk$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Tolk$actions {
  private final Tolk parser;

  /** Constructor */
  CUP$Tolk$actions(Tolk parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Tolk$do_action(
    int                        CUP$Tolk$act_num,
    java_cup.runtime.lr_parser CUP$Tolk$parser,
    java.util.Stack            CUP$Tolk$stack,
    int                        CUP$Tolk$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Tolk$result;

      /* select the action based on the action number */
      switch (CUP$Tolk$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // person ::= ASSISTANT 
            {
              People RESULT =null;
		 RESULT = People.ASSISTANT; 
              CUP$Tolk$result = parser.getSymbolFactory().newSymbol("person",9, ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // person ::= LECTURER 
            {
              People RESULT =null;
		 RESULT = People.LECTURER; 
              CUP$Tolk$result = parser.getSymbolFactory().newSymbol("person",9, ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // labnotes ::= LABNOTES 
            {
              Things RESULT =null;
		 RESULT = Things.UNKNOWNLABNOTES; 
              CUP$Tolk$result = parser.getSymbolFactory().newSymbol("labnotes",7, ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // labnotes ::= NUMME LABNOTES 
            {
              Things RESULT =null;
		 RESULT = Things.NUMMELABNOTES; 
              CUP$Tolk$result = parser.getSymbolFactory().newSymbol("labnotes",7, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)), ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // labnotes ::= PROGP LABNOTES 
            {
              Things RESULT =null;
		 RESULT = Things.PROGPLABNOTES; 
              CUP$Tolk$result = parser.getSymbolFactory().newSymbol("labnotes",7, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)), ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // book ::= BOOK 
            {
              Things RESULT =null;
		 RESULT = Things.UNKNOWNBOOK; 
              CUP$Tolk$result = parser.getSymbolFactory().newSymbol("book",6, ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // book ::= PROLOG BOOK 
            {
              Things RESULT =null;
		 RESULT = Things.PROLOGBOOK;  
              CUP$Tolk$result = parser.getSymbolFactory().newSymbol("book",6, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)), ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // book ::= HASKELL BOOK 
            {
              Things RESULT =null;
		 RESULT = Things.HASKELLBOOK; 
              CUP$Tolk$result = parser.getSymbolFactory().newSymbol("book",6, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)), ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // thing ::= labnotes 
            {
              Things RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()).right;
		Things n = (Things)((java_cup.runtime.Symbol) CUP$Tolk$stack.peek()).value;
		 RESULT = n; 
              CUP$Tolk$result = parser.getSymbolFactory().newSymbol("thing",8, ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // thing ::= book 
            {
              Things RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()).right;
		Things b = (Things)((java_cup.runtime.Symbol) CUP$Tolk$stack.peek()).value;
		 RESULT = b; 
              CUP$Tolk$result = parser.getSymbolFactory().newSymbol("thing",8, ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // talk_instr ::= SAY SOME_STRING TILL person 
            {
              Command RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Tolk$stack.elementAt(CUP$Tolk$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()).right;
		People p = (People)((java_cup.runtime.Symbol) CUP$Tolk$stack.peek()).value;
		 RESULT = new SayCommand(s, p); 
              CUP$Tolk$result = parser.getSymbolFactory().newSymbol("talk_instr",5, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-3)), ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // go_instr ::= GO DIRECTION 
            {
              Command RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()).right;
		Direction d = (Direction)((java_cup.runtime.Symbol) CUP$Tolk$stack.peek()).value;
		 RESULT = new GoCommand(d); 
              CUP$Tolk$result = parser.getSymbolFactory().newSymbol("go_instr",4, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)), ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // drop_instr ::= DROP thing 
            {
              Command RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()).right;
		Things t = (Things)((java_cup.runtime.Symbol) CUP$Tolk$stack.peek()).value;
		 RESULT = new DropCommand(t); 
              CUP$Tolk$result = parser.getSymbolFactory().newSymbol("drop_instr",3, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)), ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // take_instr ::= TAKE thing 
            {
              Command RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()).right;
		Things t = (Things)((java_cup.runtime.Symbol) CUP$Tolk$stack.peek()).value;
		 RESULT = new TakeCommand(t); 
              CUP$Tolk$result = parser.getSymbolFactory().newSymbol("take_instr",2, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)), ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // one_instruction ::= BYEBYE 
            {
              Command RESULT =null;
		 RESULT = new QuitCommand(); 
              CUP$Tolk$result = parser.getSymbolFactory().newSymbol("one_instruction",1, ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // one_instruction ::= talk_instr 
            {
              Command RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()).right;
		Command i = (Command)((java_cup.runtime.Symbol) CUP$Tolk$stack.peek()).value;
		 RESULT = i; 
              CUP$Tolk$result = parser.getSymbolFactory().newSymbol("one_instruction",1, ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // one_instruction ::= go_instr 
            {
              Command RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()).right;
		Command i = (Command)((java_cup.runtime.Symbol) CUP$Tolk$stack.peek()).value;
		 RESULT = i; 
              CUP$Tolk$result = parser.getSymbolFactory().newSymbol("one_instruction",1, ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // one_instruction ::= drop_instr 
            {
              Command RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()).right;
		Command i = (Command)((java_cup.runtime.Symbol) CUP$Tolk$stack.peek()).value;
		 RESULT = i; 
              CUP$Tolk$result = parser.getSymbolFactory().newSymbol("one_instruction",1, ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // one_instruction ::= take_instr 
            {
              Command RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()).right;
		Command i = (Command)((java_cup.runtime.Symbol) CUP$Tolk$stack.peek()).value;
		 RESULT = i; 
              CUP$Tolk$result = parser.getSymbolFactory().newSymbol("one_instruction",1, ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instruction ::= one_instruction PERIOD 
            {
              List RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).right;
		Command i = (Command)((java_cup.runtime.Symbol) CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).value;
		 RESULT=new java.util.ArrayList(); RESULT.add(0,i); 
              CUP$Tolk$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)), ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instruction EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).right;
		List start_val = (List)((java_cup.runtime.Symbol) CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).value;
		RESULT = start_val;
              CUP$Tolk$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)), ((java_cup.runtime.Symbol)CUP$Tolk$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Tolk$parser.done_parsing();
          return CUP$Tolk$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

