
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue May 20 22:02:36 CEST 2014
//----------------------------------------------------

import java.util.List;
import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Tue May 20 22:02:36 CEST 2014
  */
public class Tolk extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Tolk() {super();}

  /** Constructor which sets the default scanner. */
  public Tolk(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\004\000\002\003\004\000\002\003" +
    "\004\000\002\004\005\000\002\004\005\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\004\000\002" +
    "\007\004\000\002\010\004\000\002\011\006\000\002\012" +
    "\004\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\013\004\000\002\013\004\000\002\013\003\000" +
    "\002\014\004\000\002\014\004\000\002\014\003\000\002" +
    "\017\003\000\002\017\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\016\004\020\005\007\006\006\007\013\010" +
    "\016\027\015\001\002\000\004\002\060\001\002\000\010" +
    "\023\ufff8\024\ufff8\025\ufff8\001\002\000\020\011\041\012" +
    "\040\013\043\014\046\015\045\016\051\017\052\001\002" +
    "\000\020\011\041\012\040\013\043\014\046\015\045\016" +
    "\051\017\052\001\002\000\010\023\ufff9\024\ufff9\025\ufff9" +
    "\001\002\000\010\023\ufffc\024\ufffc\025\ufffc\001\002\000" +
    "\010\023\ufffb\024\ufffb\025\ufffb\001\002\000\004\030\035" +
    "\001\002\000\010\023\ufffa\024\ufffa\025\ufffa\001\002\000" +
    "\010\023\ufff7\024\ufff7\025\ufff7\001\002\000\006\020\033" +
    "\021\032\001\002\000\010\023\024\024\022\025\023\001" +
    "\002\000\004\026\021\001\002\000\010\023\ufff4\024\ufff4" +
    "\025\ufff4\001\002\000\016\004\020\005\007\006\006\007" +
    "\013\010\016\027\015\001\002\000\016\004\020\005\007" +
    "\006\006\007\013\010\016\027\015\001\002\000\004\002" +
    "\000\001\002\000\004\002\uffff\001\002\000\004\023\027" +
    "\001\002\000\004\002\ufffe\001\002\000\006\024\022\025" +
    "\023\001\002\000\004\002\ufffd\001\002\000\010\023\uffe8" +
    "\024\uffe8\025\uffe8\001\002\000\010\023\uffe7\024\uffe7\025" +
    "\uffe7\001\002\000\010\023\ufff2\024\ufff2\025\ufff2\001\002" +
    "\000\004\022\036\001\002\000\006\020\033\021\032\001" +
    "\002\000\010\023\ufff3\024\ufff3\025\ufff3\001\002\000\010" +
    "\023\uffe9\024\uffe9\025\uffe9\001\002\000\010\023\uffec\024" +
    "\uffec\025\uffec\001\002\000\010\023\ufff1\024\ufff1\025\ufff1" +
    "\001\002\000\004\011\056\001\002\000\010\023\uffef\024" +
    "\uffef\025\uffef\001\002\000\004\012\055\001\002\000\004" +
    "\011\054\001\002\000\010\023\ufff6\024\ufff6\025\ufff6\001" +
    "\002\000\010\023\ufff0\024\ufff0\025\ufff0\001\002\000\004" +
    "\012\053\001\002\000\010\023\uffe6\024\uffe6\025\uffe6\001" +
    "\002\000\010\023\uffea\024\uffea\025\uffea\001\002\000\010" +
    "\023\uffed\024\uffed\025\uffed\001\002\000\010\023\uffeb\024" +
    "\uffeb\025\uffeb\001\002\000\010\023\uffee\024\uffee\025\uffee" +
    "\001\002\000\010\023\ufff5\024\ufff5\025\ufff5\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\020\003\003\005\016\006\010\007\011\010" +
    "\013\011\007\012\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\013\041\014\047\015\056\016\043\001" +
    "\001\000\012\013\041\014\047\015\046\016\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\033\001\001\000\004\004\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\005\027\006\010\007\011" +
    "\010\013\011\007\012\004\001\001\000\016\005\025\006" +
    "\010\007\011\010\013\011\007\012\004\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Tolk$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Tolk$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Tolk$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Tolk$actions {
  private final Tolk parser;

  /** Constructor */
  CUP$Tolk$actions(Tolk parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Tolk$do_action(
    int                        CUP$Tolk$act_num,
    java_cup.runtime.lr_parser CUP$Tolk$parser,
    java.util.Stack            CUP$Tolk$stack,
    int                        CUP$Tolk$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Tolk$result;

      /* select the action based on the action number */
      switch (CUP$Tolk$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // pen ::= PEN 
            {
              Things RESULT = null;
		 RESULT = Things.PEN; 
              CUP$Tolk$result = new java_cup.runtime.Symbol(12/*pen*/, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right, RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // person ::= ASSISTANT 
            {
              People RESULT = null;
		 RESULT = People.ASSISTANT; 
              CUP$Tolk$result = new java_cup.runtime.Symbol(13/*person*/, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right, RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // person ::= LECTURER 
            {
              People RESULT = null;
		 RESULT = People.LECTURER; 
              CUP$Tolk$result = new java_cup.runtime.Symbol(13/*person*/, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right, RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // labnotes ::= LABNOTES 
            {
              Things RESULT = null;
		 RESULT = Things.UNKNOWNLABNOTES; 
              CUP$Tolk$result = new java_cup.runtime.Symbol(10/*labnotes*/, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right, RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // labnotes ::= NUMME LABNOTES 
            {
              Things RESULT = null;
		 RESULT = Things.NUMMELABNOTES; 
              CUP$Tolk$result = new java_cup.runtime.Symbol(10/*labnotes*/, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).left, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right, RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // labnotes ::= PROGP LABNOTES 
            {
              Things RESULT = null;
		 RESULT = Things.PROGPLABNOTES; 
              CUP$Tolk$result = new java_cup.runtime.Symbol(10/*labnotes*/, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).left, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right, RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // book ::= BOOK 
            {
              Things RESULT = null;
		 RESULT = Things.UNKNOWNBOOK; 
              CUP$Tolk$result = new java_cup.runtime.Symbol(9/*book*/, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right, RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // book ::= PROLOG BOOK 
            {
              Things RESULT = null;
		 RESULT = Things.PROLOGBOOK;  
              CUP$Tolk$result = new java_cup.runtime.Symbol(9/*book*/, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).left, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right, RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // book ::= HASKELL BOOK 
            {
              Things RESULT = null;
		 RESULT = Things.HASKELLBOOK; 
              CUP$Tolk$result = new java_cup.runtime.Symbol(9/*book*/, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).left, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right, RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // thing ::= pen 
            {
              Things RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right;
		Things p = (Things)((java_cup.runtime.Symbol) CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).value;
		 RESULT = p; 
              CUP$Tolk$result = new java_cup.runtime.Symbol(11/*thing*/, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right, RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // thing ::= labnotes 
            {
              Things RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right;
		Things n = (Things)((java_cup.runtime.Symbol) CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).value;
		 RESULT = n; 
              CUP$Tolk$result = new java_cup.runtime.Symbol(11/*thing*/, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right, RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // thing ::= book 
            {
              Things RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right;
		Things b = (Things)((java_cup.runtime.Symbol) CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).value;
		 RESULT = b; 
              CUP$Tolk$result = new java_cup.runtime.Symbol(11/*thing*/, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right, RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // greet ::= GREET person 
            {
              Command RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right;
		People p = (People)((java_cup.runtime.Symbol) CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).value;
		 RESULT = new GreetCommand(p); 
              CUP$Tolk$result = new java_cup.runtime.Symbol(8/*greet*/, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).left, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right, RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // talk_instr ::= SAY SOME_STRING TILL person 
            {
              Command RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Tolk$stack.elementAt(CUP$Tolk$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right;
		People p = (People)((java_cup.runtime.Symbol) CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).value;
		 RESULT = new SayCommand(s, p); 
              CUP$Tolk$result = new java_cup.runtime.Symbol(7/*talk_instr*/, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-3)).left, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right, RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // go_instr ::= GO DIRECTION 
            {
              Command RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right;
		Direction d = (Direction)((java_cup.runtime.Symbol) CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).value;
		 RESULT = new GoCommand(d); 
              CUP$Tolk$result = new java_cup.runtime.Symbol(6/*go_instr*/, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).left, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right, RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // drop_instr ::= DROP thing 
            {
              Command RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right;
		Things t = (Things)((java_cup.runtime.Symbol) CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).value;
		 RESULT = new DropCommand(t); 
              CUP$Tolk$result = new java_cup.runtime.Symbol(5/*drop_instr*/, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).left, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right, RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // take_instr ::= TAKE thing 
            {
              Command RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right;
		Things t = (Things)((java_cup.runtime.Symbol) CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).value;
		 RESULT = new TakeCommand(t); 
              CUP$Tolk$result = new java_cup.runtime.Symbol(4/*take_instr*/, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).left, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right, RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // one_instruction ::= BYEBYE 
            {
              Command RESULT = null;
		 RESULT = new QuitCommand(); 
              CUP$Tolk$result = new java_cup.runtime.Symbol(3/*one_instruction*/, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right, RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // one_instruction ::= greet 
            {
              Command RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right;
		Command i = (Command)((java_cup.runtime.Symbol) CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).value;
		 RESULT = i; 
              CUP$Tolk$result = new java_cup.runtime.Symbol(3/*one_instruction*/, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right, RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // one_instruction ::= talk_instr 
            {
              Command RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right;
		Command i = (Command)((java_cup.runtime.Symbol) CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).value;
		 RESULT = i; 
              CUP$Tolk$result = new java_cup.runtime.Symbol(3/*one_instruction*/, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right, RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // one_instruction ::= go_instr 
            {
              Command RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right;
		Command i = (Command)((java_cup.runtime.Symbol) CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).value;
		 RESULT = i; 
              CUP$Tolk$result = new java_cup.runtime.Symbol(3/*one_instruction*/, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right, RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // one_instruction ::= drop_instr 
            {
              Command RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right;
		Command i = (Command)((java_cup.runtime.Symbol) CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).value;
		 RESULT = i; 
              CUP$Tolk$result = new java_cup.runtime.Symbol(3/*one_instruction*/, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right, RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // one_instruction ::= take_instr 
            {
              Command RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right;
		Command i = (Command)((java_cup.runtime.Symbol) CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).value;
		 RESULT = i; 
              CUP$Tolk$result = new java_cup.runtime.Symbol(3/*one_instruction*/, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right, RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // further_instruction ::= COMMA one_instruction further_instruction 
            {
              List RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).right;
		Command i = (Command)((java_cup.runtime.Symbol) CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right;
		List j = (List)((java_cup.runtime.Symbol) CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).value;
		 RESULT=new java.util.ArrayList(); RESULT.add(i); RESULT.addAll(j);
              CUP$Tolk$result = new java_cup.runtime.Symbol(2/*further_instruction*/, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right, RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // further_instruction ::= AND one_instruction PERIOD 
            {
              List RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).right;
		Command i = (Command)((java_cup.runtime.Symbol) CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).value;
		 RESULT=new java.util.ArrayList(); RESULT.add(i);
              CUP$Tolk$result = new java_cup.runtime.Symbol(2/*further_instruction*/, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-2)).left, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right, RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instruction ::= one_instruction further_instruction 
            {
              List RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).right;
		Command i = (Command)((java_cup.runtime.Symbol) CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right;
		List j = (List)((java_cup.runtime.Symbol) CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).value;
		 RESULT=new java.util.ArrayList(); RESULT.add(i);RESULT.addAll(j); 
              CUP$Tolk$result = new java_cup.runtime.Symbol(1/*instruction*/, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).left, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right, RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instruction ::= one_instruction PERIOD 
            {
              List RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).right;
		Command i = (Command)((java_cup.runtime.Symbol) CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).value;
		 RESULT=new java.util.ArrayList(); RESULT.add(i); 
              CUP$Tolk$result = new java_cup.runtime.Symbol(1/*instruction*/, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).left, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right, RESULT);
            }
          return CUP$Tolk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instruction EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).right;
		List start_val = (List)((java_cup.runtime.Symbol) CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).value;
		RESULT = start_val;
              CUP$Tolk$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-1)).left, ((java_cup.runtime.Symbol)CUP$Tolk$stack.elementAt(CUP$Tolk$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Tolk$parser.done_parsing();
          return CUP$Tolk$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

